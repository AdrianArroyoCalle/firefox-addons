const data=require("self").data;
const prefs=require("simple-prefs").prefs;
const base64=require("base64");
const { Hotkey } = require("hotkeys");
const {Cc, Ci, Cu, Cr} = require("chrome");
Cu.import("resource://gre/modules/FileUtils.jsm");
var firefox=false;
var fennec=false;
var seamonkey=false;
var thunderbird=false;

function readJSON()
{
var file = FileUtils.getFile("ProfD", ["search.json"]);
var data = "";
var fstream = Cc["@mozilla.org/network/file-input-stream;1"].
              createInstance(Ci.nsIFileInputStream);
var cstream = Cc["@mozilla.org/intl/converter-input-stream;1"].
              createInstance(Ci.nsIConverterInputStream);
fstream.init(file, -1, 0, 0);
cstream.init(fstream, "UTF-8", 0, 0); // you can use another encoding here if you wish

let (str = {}) {
  let read = 0;
  do { 
    read = cstream.readString(0xffffffff, str); // read as much as we can and put it in str.value
    data += str.value;
  } while (read != 0);
}
cstream.close(); // this closes fstream

return data;

}
function runDivFind(search_string,json){
	//var { startServerAsync } = require("sdk/test/httpd");
	//var srv = startServerAsync(8080, "/");
	var URL=data.url("divfind.html");
	//var URL="jar:file://"+require("system").pathFor("ProfD")+"/extensions/divfind@divel.xpi!/resources/divfind/data/divfind.html";
	URL+="?SEARCH="+search_string;
	URL+="&JSON="+base64.encode(json);
	require("tabs").open(URL);


}
function firefoxSetup()
{
	var cm=require("context-menu").Item({
		label: "Search in DivFind",
		context: require("context-menu").SelectionContext(),
		contentScript: "self.on('click',function(){self.postMessage(window.getSelection().toString())});",
		onMessage: function(search_string){
			//Open URL with parameters
			runDivFind(search_string,readJSON());

		}		
	});
	var foxwidget=require("widget").Widget({
		id: "divfind-widget",
		label: "DivFind",
		contentURL: data.url("divfind64.png"), 	
		onClick: function() {
			//Open URL without parameters
			runDivFind("NULL",readJSON());
		}
	});
	var shareHotKey = Hotkey({
	  combo: prefs.hotkey,
	  onPress: function() {
	    //Open URL without parameters
			runDivFind("NULL",readJSON());
	  }
	});

}
function fennecSetup()
{
	const utils = require('api-utils/window/utils');
	const recent = utils.getMostRecentBrowserWindow();
	let selector =  recent.NativeWindow.contextmenus.SelectorContext("*");
	recent.NativeWindow.contextmenus.add("DivFind",selector,function (target){
		//Open URL without parameters
			runDivFind("NULL",readJSON());
	});
}
function seaUI(domWindow){
	var document=domWindow.document;
	var context=document.getElementById("contentAreaContextMenu");
	var menuitem=document.createElement("menuitem");
	menuitem.setAttribute("id","divfind-seamonkey");
	menuitem.setAttribute("label","DivFind");
	menuitem.addEventListener("command", function()
	{
		//Open URL without parameters
		var URL=data.url("divfind.html");
		URL+="?SEARCH=NULL&JSON="+base64.encode(readJSON());
		domWindow.open(URL,"DivFind","_blank");
	
	},true);
	context.appendChild(menuitem);

}
function seamonkeySetup(){
		let wm = Cc["@mozilla.org/appshell/window-mediator;1"].getService(Ci.nsIWindowMediator);
		var interfaz = {
		  onOpenWindow: function(aWindow) {
		    // Wait for the window to finish loading
		    let domWindow = aWindow.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindow);
		    domWindow.addEventListener("load", function() {
		      domWindow.removeEventListener("load", arguments.callee, false);
		      seaUI(domWindow);
		    }, false);
		  },
		 
		  onCloseWindow: function(aWindow) {},
		  onWindowTitleChange: function(aWindow, aTitle) {}
		};
		  // Load into any existing windows
		  let windows = wm.getEnumerator("navigator:browser"); //keep it void for all windows
		  while (windows.hasMoreElements()) {
		    let domWindow = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
		    seaUI(domWindow);
		  }

		  // Load into any new windows
		  wm.addListener(interfaz);

}
function thunderUI(domWindow)
{
	document=domWindow.document;
	var context=document.getElementById("mailContext");
	var menuitem=document.createElement("menuitem");
	var tabmail=document.getElementById("tabmail");
	menuitem.setAttribute("id", "divfind-thunderbird");
	menuitem.setAttribute("label", "DivFind");
	menuitem.addEventListener("command", function(){
		//Open URL without parameters
		tabmail.openTab("contentTab",{contentPage: data.url("divfind.html?SEARCH=NULL&JSON=NULL")});

	}, true);
	context.appendChild(menuitem);
}
function thunderbirdSetup(){
		let wm = Cc["@mozilla.org/appshell/window-mediator;1"].getService(Ci.nsIWindowMediator);
		var interfaz = {
		  onOpenWindow: function(aWindow) {
		    // Wait for the window to finish loading
		    let domWindow = aWindow.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindow);
		    domWindow.addEventListener("load", function() {
		      domWindow.removeEventListener("load", arguments.callee, false);
		      thunderUI(domWindow);
		    }, false);
		  },
		 
		  onCloseWindow: function(aWindow) {},
		  onWindowTitleChange: function(aWindow, aTitle) {}
		};
		  // Load into any existing windows
		  let windows = wm.getEnumerator("mail:3pane"); //navigator:browser in Firefox and Fennec
		  while (windows.hasMoreElements()) {
		    let domWindow = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
		    thunderUI(domWindow);
		  }

		  // Load into any new windows
		  wm.addListener(interfaz);

}
exports.main=function(options){
	require("simple-prefs").on("review",function (){
		if(firefox || fennec)
			require("tabs").open("http://addons.mozilla.org/en/firefox/addon/divfind");
	});
	var system=require("sdk/system/xul-app");
	if(system.name=="Fennec")
	{
		
		fennec=true;
	}else if(system.name=="Firefox")
	{
		firefox=true;
	}else if(system.name=="SeaMonkey")
	{
		seamonkey=true;
	}else if(system.name=="Thunderbird")
	{
		thunderbird=true;
	}
	if(firefox)
	{
		//Widget, Hotkey, ContextMenu Search
		firefoxSetup();
	}
	if(fennec)
	{
		//ContextMenu Search
		//Menu
		fennecSetup();
	}
	if(thunderbird)
	{
		//ContextMenu
		thunderbirdSetup();
	}
	if(seamonkey)
	{
		//ContextMenu
		seamonkeySetup();
	}
	if(fennec || firefox)
	{
		if(options.loadReason=="install"){
		require("tabs").open(data.url("welcome.html")); //Welcome HTML file
		require("tabs").open("http://sites.google.com/site/divelonline");	
		}
		if(options.loadReason=="upgrade"){
		require("tabs").open(data.url("changelog.html")); //Changelog HTML file
		}

	}









}
